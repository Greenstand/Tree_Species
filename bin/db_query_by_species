#!/bin/sh

# Authorization:
# 1. You will need to first access dbuser@bp1.treetracker.org via:
#   ssh -i ./dbuser.id_rsa dbuser@bp1.treetracker.org
# with the ssh private key and password, as provided by GS
# and add a rsa public key to the remote .ssh/authorized_keys file
# 2. Create a file in this directory called `passwords` with a single
# line: `dbsql PSQLPASS`, where PSQLPASS is the pgsql password, from GS

cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Usages test
if [ $# = 0 ]
then
    echo "Usage: db_query_by_species species"
    exit 1
fi

# Create tunnel
ssh -fN -L 1111:treetracker-cluster-read-only-37982-do-user-8540031-0.b.db.ondigitalocean.com:25060 dbuser@bp1.treetracker.org
PID=`ps auwx | grep ssh | grep treetracker | gawk '{printf "%d", $2}'`
# echo "(ssh PID: ${PID})"

# For trees, default
# SQL="\\pset format unaligned\n 
# SELECT trees.image_url, lat, lon, admin_user.user_name, CONCAT_WS(' ', admin_user.first_name, admin_user.last_name) AS person, entity.name AS org 
# FROM audit, trees, tree_species, admin_user, entity, planter 
# WHERE (audit.operation->'payload'->>'speciesId')::integer = tree_species.id AND
#   audit.admin_user_id = admin_user.id AND 
#   (audit.operation->'payload'->>'id')::integer = trees.id AND 
#   tree_species.name = '"$1"' AND 
#   trees.planter_id = planter.id AND 
#   planter.organization_id = entity.id;"

# Ahh!  this takes too long, doing the max time on _all_ audits. 
# SQL="\\pset format unaligned\n
# SELECT * FROM (
#   SELECT trees.id, trees.image_url, trees.lat, trees.lon
#   -- , entity.name AS org
#   FROM trees, tree_species
#   -- , planter, entity
#   WHERE trees.species_id = tree_species.id AND tree_species.name = '"$1"' 
#     -- AND trees.planter_id = planter.id AND 
#     -- planter.organization_id = entity.id
#   ) AS D
# LEFT JOIN ( 
# -- get latest det details
# SELECT A.tid, A.tmax, admin_user.user_name,
#   tree_species.id as spid, tree_species.name
# FROM (
#   SELECT (audit.operation->'payload'->>'id')::integer AS tid,
#     max(audit.created_at) AS tmax
#   FROM audit GROUP BY tid) AS A
#   LEFT JOIN audit AS B on A.tid = (B.operation->'payload'->>'id')::integer AND
#     A.tmax = B.created_at,
#   admin_user, tree_species
#   WHERE B.admin_user_id = admin_user.id AND
#   (B.operation->'payload'->>'speciesId')::integer = tree_species.id
# ) AS C
# ON D.id = C.tid;"

# Better, do the query and then do the max time in an external script
SQL="\\pset format unaligned\n
SELECT image_url, lat, lon, org, tid, t, AUD.user, spid, name  FROM (
  SELECT trees.id, trees.image_url, trees.lat, trees.lon
    , entity.name AS org
  FROM trees, tree_species
    , planter, entity
  WHERE trees.species_id = tree_species.id AND tree_species.name = '"$1"' 
    AND trees.planter_id = planter.id AND 
    planter.organization_id = entity.id
  ) AS TRE
LEFT JOIN (
  SELECT (audit.operation->'payload'->>'id')::integer AS tid,
    audit.created_at AS t, admin_user.user_name AS user, 
    (audit.operation->'payload'->>'speciesId')::integer as spid,
    tree_species.name
  FROM audit, admin_user, tree_species
  WHERE audit.admin_user_id = admin_user.id AND
   (audit.operation->'payload'->>'speciesId')::integer = tree_species.id
) AS AUD
ON TRE.id = AUD.tid ORDER BY TRE.id, AUD.t;"

SQLPW=`grep dbsql passwords | gawk '{printf "%s", $2}'` 

# Execute SQL
echo -e "$SQL" | psql "sslmode=require host=localhost dbname=treetracker user=readonlyuser port=1111 password=$SQLPW" | \tail -n +3 | head -n -1 | \
    gawk 'BEGIN{FS="|"}
          {
            if ((NR != 1) && ($1 != n))
            print store
            n = $1
            store = $0
          }
          END{ print store }'
# because the output is sorted by time, just print the last line of
# every tree number

# kill tunnel
kill -9 $PID

